name: (sub) Unit Tests

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      python_version:
        description: A version of Python to install
        type: string
        required: true
      ref:
        description: Ref to checkout
        type: string

jobs:

  unittests:
    name: Verify unit tests are successful
    runs-on: ubuntu-latest
    steps:

      # - name: Find out ref to checkout
      #   id: ref
      #   run: |
      #       if [ "${{ github.event_name  == 'repository_dispatch' &&
      #       github.event.client_payload.slash_command.args.named.sha != '' &&
      #       contains(
      #         github.event.client_payload.pull_request.head.sha,
      #         github.event.client_payload.slash_command.args.named.sha
      #       ) }}" = "true" ]; then
      #         echo "::set-output name=event_ref::refs/pull/${{ github.event.client_payload.pull_request.number }}/merge"
      #       else
      #         echo "::set-output name=event_ref::"
      #       fi

      # - name: Checkout code
      #   uses: actions/checkout@v4

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          # ref: ${{ steps.ref.outputs.event_ref }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Create Poetry venv
        run: |
          poetry env use ${{ inputs.python_version }}
          poetry install

      - name: Run unit tests and coverage
        run: poetry run make test_coverage

      # requires pull-requests: write permissions when triggered from PRs
      - name: Get coverage
        uses: orgoro/coverage@v3.1
        with:
            coverageFile: coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
            thresholdAll: 0.95
            thresholdNew: 0.90
            thresholdModified: 0.95
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'repository_dispatch' }}

      # if: ${{ contains(['pull_request', 'repository_dispatch'], github.event_name) }}
      # TODO maybe we can even check for slash command name

      # # Update check run called "unittests"
      # - uses: actions/github-script@v6
      #   id: update-check-run
      #   if: |
      #     github.event_name == 'repository_dispatch' &&
      #     github.event.client_payload.slash_command.args.named.sha != '' &&
      #     contains(
      #       github.event.client_payload.pull_request.head.sha,
      #       github.event.client_payload.slash_command.args.named.sha
      #     )
      #   env:
      #     number: ${{ github.event.client_payload.pull_request.number }}
      #     job: ${{ github.job }}
      #     # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
      #     conclusion: ${{ job.status }} 
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const { data: pull } = await github.rest.pulls.get({
      #         ...context.repo,
      #         pull_number: process.env.number
      #       });
      #       const ref = pull.head.sha;

      #       const { data: checks } = await github.rest.checks.listForRef({
      #         ...context.repo,
      #         ref
      #       });

      #       const check = checks.check_runs.filter(c => c.name === process.env.job);

      #       const { data: result } = await github.rest.checks.update({
      #         ...context.repo,
      #         check_run_id: check[0].id,
      #         status: 'completed',
      #         conclusion: process.env.conclusion
      #       });

      #       return result;
